# Nit on windows

The support on windows is more than experimental.
Fell free to report your attempts.

## Using msys2

msys2 and mingw-w64 packages tools and services to compile native Windows applications using GCC and the GNU toolchain.

*This process is a work in progress, it may not work with the current nit source tree.*

1. Download and install msys2 available at <https://msys2.github.io/>.

2. Update the package list by following the instructions at <https://sourceforge.net/p/msys2/wiki/MSYS2%20installation/>.

3. Install the minimum required package to download and compile nit:

   ~~~
   pacman -S make ccache pkg-config libgc-devel mingw-w64-x86_64-gc mingw-w64-x86_64-libunwind git
   ~~~

3. Then, from the msys2 (or mingw64) command line, clone the Nit repo as usual:

   ~~~
   git clone https://github.com/nitlang/nit.git
   ~~~

   It will complain about the "very bad name" test file. This file cannot be represented on a Windows FS. Ignore this message, all other thousands of files should have unpacked successfully.

5. As proposed by the output of the make, setup your environment with

   ~~~
   source misc/nit_env.sh
   ~~~

5. When you finally have a `bin/nitc.exe`, compile and execute hello_world with:

   ~~~
   nitc examples/hello_world.nit
   ./hello_world.exe
   ~~~

5. To distribute a program, copy the libgc and libwinpthread DLLs with the executable. More DLLs may be needed for programs using native libraries, but for `hello_world.exe` only the following libraries are needed:
   ~~~
   C:\msys64\mingw64\bin\libgc-1.dll
   C:\msys64\mingw64\bin\libwinpthread-1.dll
   ~~~

## Using Cygwin

1. Download Cygwin from <https://cygwin.com/>
2. Install it and select the following packages:

   ~~~
   gcc-core gcc-g++ git make ccache pkg-config libisl10 libcloog-isl libgc-devel
   ~~~

3. Then, from the cygwin command line, clone the Nit repo as usual:

   ~~~
   git clone https://github.com/nitlang/nit.git
   ~~~

   It will complain about the "very bad name" test file. This file cannot be represented on a Windows FS. Ignore this message, all other thousands of files should have unpacked successfully.
   To clear the repository and have a nice working dir status (if you care), you should run:
   
   ~~~
   git chechout -f HEAD
   ~~~

5. As proposed by the output of the make, setup your environment with

   ~~~
   source misc/nit_env.sh
   ~~~

5. When you finally have a `bin/nitc.exe`, compile and execute hello_world with:

   ~~~
   nitc examples/hello_world.nit
   ./hello_world.exe
   ~~~

5. To distribute a program outside of the cygwin environment, copy the cygwin and libgc DDLs with the executable. More DLLs may be needed for programs using native libraries, but for `hello_world.exe` and `nitc.exe` only the following libraries are needed:

  `/usr/bin/cyggc-1.dll /usr/bin/cygwin1.dll`

6. More work is needed to actually develop Nit programs under a Windows environment. Simple programs like hello_world and Fibonacci work well outside of cygwin. However the compiler still expects UNIX-like paths and can't find nit_dir.

Additional notes:

* I didn't find libunwind for cygwin, but I didn't search much either.

## FAQ/issues

### The initial make does not work

If you have something like:

~~~
src/git-gen-version.sh: line 2: $'\r': command not found
~~~

It is because you checked out the Nit repository with the config set to `core.autocrlf true`.
Some `git` tools on Windows activate this flag by default.
The `git` command from the Cygwin package does not that. 

###  Heap size errors

If tools or compiled programs crash with heap size errors, you should enlarge the heap of the executable with `peflag` (that comes with Cygwin):

~~~
peflags --cygwin-heap=4096 prog.exe`
~~~

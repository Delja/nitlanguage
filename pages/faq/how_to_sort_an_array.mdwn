# How to sort an array

To sort collections, Nit features an abstract generic class `AbstractSorter[E]` working with arrays.

`AbstractSorter[E]` introduces two methods :

  * `compare(a: E, b:E): Int`

Compare `a` and `b` then returns :

    -1 if a < b
    0 if a = b
    1 if a > b

  * `sort(array: Array[E])` using the `compare` method

To implements his own sorters the developper can inherit `AbstractSorter[E]`.

Here an exemple with the basic implementation of `ComparableSorter[E]` in `standard::collection` :

~~~
# This class uses the operator <=> to sort arrays.
# You can also use the `sort' method of the `Array' class.
class ComparableSorter[E: Comparable]
    super AbstractSorter[E]
    # Return a <=> b
    redef fun compare(a, b) do return a <=> b
    init do end
end
~~~

`ComparableSorter[E]` can be used in this way :

~~~
var array = ["a", "c", "b"] # An array initialized with unsorted `String` values 
# `String` is a subtype of `Comparable`
var sorter = new ComparableSorter[String]
sorter.sort(array) # Use the sorter to sort the array
    
print array #abc
~~~

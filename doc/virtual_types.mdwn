# Virtual Types

Virtual type is a way to 

Virtual types is a good solution when:

  * A class need to refer to the real itself
  * Two class hierarchy are somewhat parallel
  * You want [[covariance]]

### Usage

Example, we have employees what works in standard office and bosses, that are technically employees, but hat works in boss offices (that are improved offices with a fridge).

One way to achieve the modeling it to use virtual types.
virtual types are defined inside class (like methods and attributes) but with the keyword `type`.
Inside the class, the virtual type can be used (almost) like any other static type.

    class Employee
        type OFFICE: Office
        var office: OFFICE
    end

Subclasses can redefine (with `redef`) the virtual types they want to change.
The only requirement is that the new bound is a sub-type of the previous bound.

    class Boss
        super Employee
        redef type OFFICE: BossOffice
    end

var e: Employee = ...
e.office.fridge.open # Compilation Error! Office has no method fridge
var b: Boss = ...
b.office.fridge.open # OK!

# Get Involved

Nit is a target framework for novel compilation techniques and object-oriented research. Currently, the compiler and others tools are actively developed in order to reach fully usable state.

## Discuss

The Nit project has a [[mailing list|nitlanguage-discussion@lists.nitlanguage.org]] where users and developers can discuss various issues and help each other. Archive and instricption is available at the [[list page|http://lists.nitlanguage.org/listinfo/nitlanguage-discussion]].

If you wish to get involved in the project or use Nit as a framework for research, please contact the mailing list.

## Test

Try to use Nit and [[report problems|bugs]] with the language, the libraries or the tools.

## Code

The source code off all Nit tools are freely [[available|download]].

### Basic documentation

* The [[auto-generated documentation|http://nitlanguage.org/doc/nitc/]]
* The main [[README|http://nitlanguage.org/nit.git/blob/wip:/README]]

### Sending Code Contributions

* Sign-off all you patches. By the signed-off-by tag, you state that you agree with the [[contribution policy]]
* You can communicate patches by the way you prefer including: merge request on some Git repository by email, merge request to the [[nit githup repository|https://github.com/privat/nit]], or patches by email.

### Starting and Bootstrapping

    $ git clone http://nitlanguage.org/nit.git
    $ cd nit
    $ make
    $ cd src
    $ ./ncall.sh

ncall.sh starts a full bootstrap of the compiler.
More specifically, it does :

* `./nc nitc` that compiles nitc.nit with the compiler `../c_src/src` so we get `src/nitc`
* `./nc2 nitc` that compiles nitc.nit with `src/nitc` and we get `src/nitc2`
* `./nc3 nitc` that compiles nitc.nit with `src/nitc2` and we get `src/nitc3`
* `./nc4 ../examples/hello_world.nit` and `./hello_world_4`the verify that `src/nitc3` is minimally functionnal.

Note that the Nit code of the compiler is writtent with some legagy Nit: all modern functionnality of Nit are not always usable since it is the primitive compiler (`c_src/nitc`) that is used.

On of the standard error of the nitc developper is to break the bootstrap, it means that the Nit compiler is written in an incompatible way with the primitive compiler.
Regulary executing `./ncall.sh` helps to check that the bootstrap is not broken.

### Regression Tests

The directory `tests` contains various small Nit programs used to check that the compiler is not broken.

* [[tests/README|http://nitlanguage.org/nit.git/blob/wip:/tests/README]]

To run the full regression test-suite, run:

    cd tests
    make

Individual tests can also be run independently:

    ./tests.sh some_nit_programs.nit...

Each time some feature are added by a developer, he should:

* bootstrap the compiler is src/ : `cd src/ ; ./ncall.sh`
* run the full regression test-suite : `cd tests/ ; make`
* add new tests to prevent future breakage of the new shiny feature

### Nit Parser

Nit tools use a rare SableCC3 version to generate the Nit parser.

* [[src/parser/README|http://nitlanguage.org/nit.git/blob/wip:/src/parser/README]]
* The alternate SableCC generator [[http://www.mare.ee/indrek/sablecc/]] (require Java)

Moreover, the Nit language description file extends the standard SableCC3 syntax and includes parametric productions to factorize the description of the language.

* The extended language description of Nit [[nit.sablecc3xx|http://nitlanguage.org/nit.git/blob/wip:/src/parser/nit.sablecc3xx]]
* The script that transforms an extended syntax into a regular SableCC3 syntax [[prescc.sh|http://nitlanguage.org/nit.git/blob/wip:/src/parser/prescc.sh]]

In order to simplify the development of the Nit tools, files produced by the parser generator are committed in the repository; therefore Java and SableCC3 is only required for developers that need to alter the Nit syntax.

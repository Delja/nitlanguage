[[!sidebar]]

# # Debugger

The Nit standard debugger is a tool based on the Interpreter for Nit, it supports basics commands used for debugging a program much like GDB or such.

For now, the debugger is a standalone binary file, to use it, launch your program using the nit interpreter *nit* and use the *-d* option. (Later to be included in the Eclipse plugin)

# # Features

You can add/remove breakpoints on instructions, so that the execution will stop when the execution reaches the specified line of the specified file.

When an error is encountered, the debugger gives you the chance of inputting commands before exiting.

The debugger also gives the possibility of printing the values of the requested variables.

The modification of variables at runtime is possible too, but only if the variables are of primitive types.

Also, you probably won't want to type a long variable name every time you wish to print its value, the debugger has the possibility of setting aliases to hide the awful long and cryptic name of that variable you try to access by a beautiful alias.

# # Commands

`n` : Proceeds to the next instruction (step-over)

`s` : Steps in an instruction

`finish` : Steps out of an instruction

`c` : Continues the execution until a breakpoint is encountered or until an error/end of program

`b/break line_number` : Adds a breakpoint on line *line_number* for the current file

`b/break file line_number` : Adds a breakpoint on line *line_number* for the file *file* (Don't forget to add the .nit extension to the command)

`d/delete line_number` : Removes a breakpoint on line *line_number* for the current file

`d/delete file line_number` : Removes a breakpoint on line *line_number* for the file *file*

`kill` : Kills the current program (produces a stack trace)

`variable = value` : Sets the value of *variable* to *value* (Only supports primitive types for now : Bool, Char, Int, Float)

`p/print variable_name` : Prints the value of the variable *variable_name*

`p/print variable_name[index]` : Prints the value of the variable contained at the index *index* of variable *variable_name* (*variable_name* must be a subtype of SequenceRead)

`p/print variable_name[index_from..index_to]` : Prints the values of all the variables contained from index *index_from* up to *index_to* in the variable *variable_name*

All the print commands also work on any dimension SequenceRead collection.

`variable_name as alias` : Sets an alias *alias* for the variable *variable_name*

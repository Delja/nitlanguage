You may notice that the FFI with Java is very similar to the [[FFI with C]]. This page highlights the difference and avoids repeating the information present in the documentation of the [[FFI with C]]. For this reason, it is strongly recommanded that you read [[FFI with C]] before this page.

# Extern methods implemented in Java

TODO

# Extern classes in Java

Nit extern classes wraps extern types to be used in Nit code. Thay allow pass data in and out of extern methods with ease. The single value of an instance of an extern class is the extern instance that it warps.

When the extern type of an extern class is in Java you get what we call a extern Java class. It is a Nit class wrapping a Java type. In Nit you can manipulate its instances pretty much like any other instances and in Java you will get a Java object.

## Declaration

It is declared like any other extern class, however the extern type declarations must be preceded by `in "Java"`. It will thus look like this:

~~~~
extern class AndroidBundle in "Java" `{ android.os.Bundle `}
...
~~~~

To maintain the API coherence, the introduction of an extern Java class should declare two things :
* That it is subclass to JavaObject if it is not already through other super classes. 
* it should redefine the virtual type SELF with itself. This type is used by some methods of JavaObject such as...

A simple but complete extern Java class should look like this:

~~~~
extern class AndroidBundle in "Java" `{ android.os.Bundle `}
	super JavaObject
	redef type SELF: AndroidBundle

	# ...
end
~~~~

## Equivalent Java type

The equivalent Java type must respect the following conditions:

* It must be described by its full namespace (ex: `java.io.File`)
* It can use the Java format or the internat format (using respectively `.` or `/` between namespaces and class names)
* Inner classes must be specified using the `$` symbol between the names of the parent class and the inner class (ex: `android.content.SharedPreferences$Editor`)

Limitations:

* Java primitive types (including the array) cannot be used as the equivalent type. You should instead use existing classes in the Java module. 
* As of now, Java generic types also cannot be used as an extern type. However, this is a planned feature.

Additional notes about the equivalent Java type:

* It can be an interface, and have methods in Nit.
* It can specialize other extern classes and Nit interfaces.

# Nit objects in Java

TODO

# Java objects in Nit

TODO

# Common use cases

## Sub-class a Java class

TODO

## Java threads

TODO
